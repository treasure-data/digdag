package io.digdag.cli.profile;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.ImmutableList;
import io.digdag.core.session.ArchivedTask;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Supplier;

/**
 * Represents the summary of task analysis and has capability of calculating task start delays and execution durations.
 *
 * In the following cases, start delay analysis skips over a task when
 *
 * 1. the task is dynamically generated by `_error`, `_check` directive or etc.
 *    In this case, `started_at` of the task is set to an unexpectedly later timestamp.
 *    That's because `failure-alert`, `_error` and `_check` are dynamically generated connecting to the parent task
 *    after preceding tasks take some time and we can't tell it apart from actual delay.
 *
 * 2. the task or the parent task doesn't have `started_at`.
 *    This can happen with old archived tasks generated by old implementation.
 *
 * 3. the task has no upstream tasks and the parent is not GROUP_ONLY task type (e.g. the first child task under a `for_each` operator).
 *    In this case, the duration between the parent's `started_at` and the task's one seems unexpectedly larger.
 *    That's because some operators start child tasks after its own operation finishes
 *    (e.g. `td_for_each` operator) and we can't tell it apart from actual delay.
 *
 * 4. the task has any upstream task and the upstream tasks don't have `started_at`.
 *    This happens when the attempt is started by `retry --resume`.
 *    The behavior itself that skipped tasks in a retried attempt have empty `started_at` seems unexpected.
 *    It may be fixed in the future.
 *
 * 5. the task is retried. That's because a retried task directly connects to the parent task
 *    and the `started_at` is recorded after proceeding tasks fail.
 *    The behavior that retried tasks have later `started_at` seems reasonable.
 *    This limitation won't be removed for a while...
 */
public class WholeTasksSummary
{
    private static final Logger logger = LoggerFactory.getLogger(WholeTasksSummary.class);

    @JsonProperty
    public final TasksSummary overall;

    @JsonProperty
    public final Map<Integer, TasksSummary> sites;

    public WholeTasksSummary(TasksSummary overall, Map<Integer, TasksSummary> sites)
    {
        this.overall = overall;
        this.sites = sites;
    }

    private static class PropagatableTasksSummaryBuilder
        implements TasksSummary.Builder
    {
        private final List<TasksSummary.DefaultBuilder> builders;

        public PropagatableTasksSummaryBuilder(List<TasksSummary.DefaultBuilder> builders)
        {
            this.builders = builders;
        }

        @Override
        public void incrementAttempts()
        {
            builders.forEach(builder -> builder.incrementAttempts());
        }

        @Override
        public void incrementTotalTasks(long value)
        {
            builders.forEach(builder -> builder.incrementTotalTasks(value));
        }

        @Override
        public void incrementTotalRunTasks()
        {
            builders.forEach(builder -> builder.incrementTotalRunTasks());
        }

        @Override
        public void incrementTotalSuccessTasks()
        {
            builders.forEach(builder -> builder.incrementTotalSuccessTasks());
        }

        @Override
        public void incrementTotalErrorTasks()
        {
            builders.forEach(builder -> builder.incrementTotalErrorTasks());
        }

        @Override
        public void addStartDelayMillis(long duration)
        {
            builders.forEach(builder -> builder.addStartDelayMillis(duration));
        }

        @Override
        public void addExecDurationMillis(long duration)
        {
            builders.forEach(builder -> builder.addExecDurationMillis(duration));
        }

        @Override
        public void updateMaxDelayMillisIfNeeded(long delayMillis, Supplier<ArchivedTask> task)
        {
            builders.forEach(builder -> builder.updateMaxDelayMillisIfNeeded(delayMillis, task));
        }
    }

    static class Builder
    {
        TasksSummary.DefaultBuilder totalBuilder = new TasksSummary.DefaultBuilder();

        Map<Integer, TasksSummary.DefaultBuilder> sites = new HashMap<>();

        WholeTasksSummary build()
        {
            return new WholeTasksSummary(totalBuilder.build(), buildSites());
        }

        private Map<Integer, TasksSummary> buildSites()
        {
            Map<Integer, TasksSummary> sites = new HashMap<>(this.sites.size());
            for (Map.Entry<Integer, TasksSummary.DefaultBuilder> entry : this.sites.entrySet()) {
                sites.put(entry.getKey(), entry.getValue().build());
            }
            return sites;
        }

        // This method is called for each attempt and
        // accumulates stats in `builder`s both of total and per-account.
        void updateWithTasks(int siteId, List<ArchivedTask> originalTasks)
        {
            TasksSummary.DefaultBuilder perSiteBuilder =
                    sites.computeIfAbsent(siteId, (k) -> new TasksSummary.DefaultBuilder());

            PropagatableTasksSummaryBuilder propagatableTasksSummaryBuilder =
                    new PropagatableTasksSummaryBuilder(ImmutableList.of(totalBuilder, perSiteBuilder));

            propagatableTasksSummaryBuilder.updateWithTasks(originalTasks);
        }
    }
}
